/**
 * Plugin - Pregnant
 * Enabled Default? Yes, but can be disabled in the sexbound.config file
 *
 * Controls an actor's ability to be impregnated and impregnate other actors, as well as everything related to pregnancies.
 */
{
  /**
   * true  := Everything can both impregnate and be impregnated. Don't ask me how that's possible.
   * false := Disables free for all mode.
   */
  "enableFreeForAll": false,

  /**
   * OBSOLETE - REPLACED BY MAIN CONFIG "immersionLevel"
   * true  := Sends a radio message to players upon impregnating or being impregnated.
   * false := disabled.
   */
  "enableNotifyPlayers": true,

  /**
   * true  := Allows an actor to impregnate itself. (Must be an actor who can produce sperm and ovulate).
   * false := Disables.
   */
  "enableAsexualReproduction": false,

  /**
   * true  := Allow actors to be impregnated multiple times.
   * false := Do not allow an actor to to be impregnated again while pregnant.
   * NOTE: This determines only if an already pregnant character can be impregnated again. It does NOT control the twin/triplet pregnancy logic which also works when this is "false"!
   */
  "enableMultipleImpregnations": false,

  /**
   * true  := Show pregnant tummies of actors during sex interaction.
   * false := Hide pregnant tummies of actors during sex interaction.
   */
  "enablePregnancyFetish": true,

  /**
   * OBSOLETE - REPLACED BY MAIN CONFIG "immersionLevel"
   * true  := Suppress all notifications and radio messages about impregnations.
   * false := disabled.
   */
  "enableSilentImpregnations": false,

  /**
   * true  := Species must be the same, of the same type or specified in the compatibleSpecies list.
   * false := Species compatibility is not taken into account.
   */
  "enableCompatibleSpeciesOnly": true,

  /**
   * A given species can impregnate a list of other species.
   *
   * Using this requires the above enableCompatibleSpeciesOnly to be set to true.
   *
   * ex. A floran can impregnate a hylotl
   * ex. A hylotl can impregnate a floran
   * "all" is available as a universal placeholder
   */
  "compatibleSpecies": {
    "apex": [],
    "avian": [],
    "fenerox": [],
    "floran": [],
    "glitch": [],
    "human": [],
    "hylotl": [],
    "novakid": [],
    "penguin": [],
    "neki": [],
    "neko": [],
    "felin": []
  },
  
  /**
   * A table defining species which, when crossed, result in a specified third species baby
   *
   * By default, the baby rolls from either the father or mother species.
   * Use this to define that, e.g., a human x dragon baby becomes a half-breed dragonkin
   * "motherSpecies": {"fatherSpecies": "childSpecies"}
   */
  "geneticTable": {
    
  },
  
  /**
   * true  := Certain races and conditions can abort pregnancies during climax
   * false := Disables pregnancy hazards during climax
   */
  "enablePregnancyHazards": true,
  
  /**
   * List of pregnancy hazard probabilities (if enabled)
   * "Climaxing Species": {"Fucked Species": Probability}
   * Same species sex is always safe
   */
  "pregnancyHazards": {
    "default": {"default": 0.0},
    "novakid": {"default": 0.1, "avali": 0.2, "floran": 0.2},
    "avali": {"default": 0.1},
    "glitch": {"default": 0.05},
    "floran": {"default": 0.05}
  },
  
  /**
   * Chance for birth to fail
   */
  "stillbornChance": 0.005,
  
  /**
   * List of species who are immune to pregnancy hazards
   */
  "pregnancyHazardsExclude": [
    "glitch"
  ],

  /**
   * A list of genders that can produce sperm or make others pregnant.
   * OBSOLETE - MOVED TO MAIN CONFIG
   * Only kept to not break older patches
   */
  "whichGendersCanProduceSperm": ["futanari", "male"],

  /**
   * A list of genders that can ovulate or can be made pregnant.
   * OBSOLETE - MOVED TO MAIN CONFIG.
   * Only kept to not break older patches
   */
  "whichGendersCanOvulate": ["female", "futanari", "cuntboy"],

  /**
   * A list of status names to check on the impregnated actor to prevent a pregnancy.
   */
  "preventStatuses": [
    "birthcontrol",
    "equipped_nopregnant",
    "equipped_iud",
    "infertile",
    "sterile"
  ],

  /**
   * What notifications config file should be loaded?
   */
  "notifications": "/dialog/sexbound/en/notifications.config",

  /**
   * true  := Use operating system (real-life) time for pregnancies and determining birth time.
   * false := Use in-game world time instead. Means faster birthing.
   */
  "useOSTimeForPregnancies": false,

  /**
   * Affects the chance to become pregnant for players (Default: 0.5 = 50% chance)
   * When period cycle is enabled, only affects the chance to become pregnant during ovulation period, so a higher chance might be better
   */
  "fertility": 0.5,
  
  /**
   * Affects the chance to become pregnant for non-player entities (NPCs, monster) (Default: 0.1 = 10% chance)
   */
  "fertilityNPC": 0.1,

  /**
   * Fertility pill chance multiplier. An entity's fertility chance gets multiplied with this value.
   */
  "fertilityMult": 1.15,

  /**
   * There are three trimesters in a pregnancy, but you can set it to be more or less than 3.
   *
   * Note: This number is multiplied by the trimesterLength.
   */
  "trimesterCount": 3,

  /**
   * Each trimester lasts 2 - 3 days.
   */
  "trimesterLength": [2, 3],
  
  /**
   * true  := Use realistic period cycle, meaning pregnancy can only occur during ovulation period like in real life (player only)
   * false := Use simplistic model where every climax has a fertility roll
   */
  "enablePeriodCycle": true,
  
  /**
   * The time between each ovulation day as [min, max] number of days (based on average 840 second ingame day)
   */
  "periodCycleLength": [3, 5],
  
  /**
   * Chance for any impregnation to create multiple babies (twins, triplets, ...)
   * This value (as percentage, 0.01 = 1%) determines the chance for a generated baby to generate another. Meaning 1% for twins, 0.01% for triplets, ...
   */
  "multiPregnancyChance": 0.01,
  
  /**
   * Count limit of multi pregnancies. 3 = maximum of triplets, 2 = maximum of twins, ...
   */
  "multiPregnancyLimit": 3,
  
  /**
   * If you want pregnancy tests to be infinitely reusable like in the past, set this to true
   */
  "legacyInfinitePregnancyTest": false
}
